@use 'sass:list';
@use 'functions' as f;

/* === Grid Layouts === */

@mixin list-tab($col) {
  width: 100%;
  display: flex;
  flex-direction: column;
  row-gap: 3vmin;
  align-items: flex-start;

  @for $i from 2 through $col {
    &__item:nth-child(#{$i}) {
      margin-inline-start: calc(($i - 1) * 12%);
    }
  }
}

@mixin center {
  display: grid;
  place-items: center;
}

@mixin grid-center-vertical {
  display: grid;
  width: 100%;
  gap: 2em;
  align-items: center;
}

/* === Flex Layouts === */

@mixin flex-center-vertical {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

/* === Color-theme A11y Outline === */

@mixin outline-theme($bg) {
  background-color: $bg;

  &:focus-within,
  *:focus-visible {
    outline-color: f.outline-clr($bg);
  }
}

/* === Neo Brutalist Shadow === */

@mixin box-shadow {
  @include pseudo;
  top: 3px;
  left: 3px;
  width: calc(100% + 5px);
  height: calc(100% + 8px);
  background-color: var(--text);
  z-index: -1;
}

/* === Neo Brutalist Window === */

@mixin window($color) {
  position: relative;
  width: clamp(305px, 80%, 570px);
  border: var(--border);
  border-radius: var(--border-radius);
  background-color: $color;
  z-index: 1;

  &::after {
    @include box-shadow;
    left: 5px;
    border-radius: var(--border-radius);
  }
}

/* === Pseudo Element === */

@mixin pseudo {
  position: absolute;
  content: '';
}

/* === H2 Highlight === */

@mixin highlight {
  display: block;
  content: '';
  position: absolute;
  top: 0.7em;
  height: 35%;
  width: calc(100% + 0.5em);
  background-image: linear-gradient(
    to left,
    var(--secondary) 10%,
    var(--accent) 100%
  );
  // background-color: var(--saturated);
  z-index: -1;
}

/* === Random Duration, Delay === */

@mixin random-duration($item, $count, $animation) {
  $a-duration: 5s;

  @for $i from 1 through $count {
    #{$item}:nth-of-type(#{$i}) {
      animation: $animation
        ($a-duration + ($i - 1) * 1.25)
        ease-in-out
        infinite
        alternate;
    }
  }
}

@mixin random-delay($item, $a-delay, $from, $to) {
  @for $i from $from through $to {
    #{$item}:nth-child(#{$i}) {
      animation-delay: calc($a-delay * ($i - 1));
    }
  }
}

/* === Project 10 === */

@mixin populate-dots($num) {
  $rotate: 15deg;
  @for $i from 2 through $num {
    .dots .dots-#{$i} {
      transform: rotate($rotate);
    }
    $rotate: $rotate + 15deg;
  }
}

/* === Color Palette === */

@mixin set-color-palette($item, $color-palette, $pseudo-element: false) {
  @for $i from 1 through list.length($color-palette) {
    @if $pseudo-element {
      #{$item}:nth-child(#{$i})::after {
        background-color: #{list.nth($color-palette, $i)};
      }
    }
    #{$item}:nth-child(#{$i}) {
      background-color: #{list.nth($color-palette, $i)};
    }
  }
}
